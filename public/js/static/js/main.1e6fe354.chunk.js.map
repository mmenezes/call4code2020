{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useEffect","addResponseMessage","a","fetch","method","headers","userResponse","json","result","console","log","session_id","localStorage","setItem","err","createSession","className","handleNewUserMessage","newMessage","getItem","body","JSON","stringify","message","output","generic","forEach","item","response_type","text","options","i","value","input","fetchMessageResponse","title","subtitle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+HAAAA,EAAOC,QAAU,IAA0B,kC,6HCyG5BC,MAjGf,WAqFI,OAnFFC,qBAAU,WACXC,6BACA,cAEmB,uCAAG,gCAAAC,EAAA,+EAEOC,MAC3B,oCAAqC,CAEnCC,OAAQ,MACRC,QAAS,CACV,eAAgB,sBAPG,cAEdC,EAFc,gBAYDA,EAAaC,OAZZ,cAYdA,EAZc,gBAaCA,EAAKC,OAbN,OAadA,EAbc,OAcpBC,QAAQC,IAAIF,EAAOG,YACnBC,aAAaC,QAAQ,aAAcL,EAAOG,YAftB,kDAmBpBF,QAAQC,IAAI,CAAEI,IAAG,OAnBG,0DAAH,oDAsBnBC,KACG,IAyDE,yBAAKC,UAAU,OACb,kBAAC,SAAD,CACEC,qBAvDqB,SAACC,GAC5BT,QAAQC,IAAR,gCAAqCQ,IACd,uCAAG,oCAAAhB,EAAA,sEAErBS,EAAaC,aAAaO,QAAQ,cAFb,SAGAhB,MAC3B,oCAAqC,CAEnCC,OAAQ,OACRC,QAAS,CACV,eAAgB,oBAIfe,KAAMC,KAAKC,UAAU,CACpB,WAAcX,EACd,MAAS,CACV,aAAgB,OAChB,KAAQO,OAhBiB,cAGrBZ,EAHqB,gBAqBRA,EAAaC,OArBL,cAqBrBA,EArBqB,iBAsBNA,EAAKC,OAtBC,QAsBrBA,EAtBqB,OAuBvBe,EAAU,GACdd,QAAQC,IAAIF,GACEA,EAAOgB,OAAOC,QACtBC,SAAQ,SAAUC,GACE,QAAtBA,EAAKC,gBACPL,EAAUA,EAAU,SAAWI,EAAKE,KACpC5B,6BAAmB0B,EAAKE,OAEA,UAAtBF,EAAKC,eACPD,EAAKG,QAAQJ,SAAQ,SAAUK,GAC9BR,EAAUA,EAAU,QAAUQ,EAAEC,MAAMC,MAAMJ,KAC5C5B,6BAAmB,UAAY8B,EAAEC,MAAMC,MAAMJ,YAlCrB,kDA0C3BpB,QAAQC,IAAI,CAAEI,IAAG,OA1CU,0DAAH,oDA6C1BoB,IAUSC,MAAM,iBACNC,SAAS,qCCvFCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,gBDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAM/B,a","file":"static/js/main.1e6fe354.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from 'react';\nimport { Widget, addResponseMessage } from 'react-chat-widget';\n\nimport 'react-chat-widget/lib/styles.css';\n\nimport logo from './logo.svg';\n\n\nfunction App() {\n\n  useEffect(() => {\n\taddResponseMessage(\n\t'Namaste!!!'\n\t);\n\tconst createSession = async () => {\n\t\ttry {\n\t\t\tconst userResponse = await fetch(\n\t\t\t'http://localhost:3000/api/session', {\n\t\t\t\t\n\t\t\t  method: 'GET',\n\t\t\t  headers: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\n\t\t\t  }\n\t\t\t}\n\t\t\t);\n\t\t\tconst json = await userResponse.json();\n\t\t\tconst result = await json.result;\n\t\t\tconsole.log(result.session_id);\n\t\t\tlocalStorage.setItem('session_id', result.session_id);\n\t\t\t\n\t\t\t//addResponseMessage(\tresult.session_id\t);\n\t\t} catch (err) {\n\t\t\tconsole.log({ err });\n\t\t}\n\t};\n\tcreateSession();\n\t}, []);\n\n    //const renderCustomComponent = () => <div>ABCD</div>\n\n  const handleNewUserMessage = (newMessage) => {\n    console.log(`New message incoming! ${newMessage}`);\n\tconst fetchMessageResponse = async () => {\n\t\ttry {\n\t\t\tconst session_id = localStorage.getItem('session_id')\n\t\t\tconst userResponse = await fetch(\n\t\t\t'http://localhost:3000/api/message', {\n\t\t\t\t\n\t\t\t  method: 'POST',\n\t\t\t  headers: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\n\t\t\t  },\n\t\t\t \n\t\t\t  body: JSON.stringify({\n\t\t\t\t  \"session_id\": session_id,\n\t\t\t\t  \"input\": {\n\t\t\t\t\t\"message_type\": \"text\",\n\t\t\t\t\t\"text\": newMessage\n\t\t\t\t  }\n\t\t\t\t})\n\t\t\t}\n\t\t\t);\n\t\t\tconst json = await userResponse.json();\n\t\t\tconst result = await json.result;\n\t\t\tlet message = '';\n\t\t\tconsole.log(result);\n\t\t\tconst items = result.output.generic;\n\t\t\titems.forEach(function (item) { \n\t\t\t\tif(item.response_type == 'text'){\n\t\t\t\t\tmessage = message + ' <br/>' + item.text;\n\t\t\t\t\taddResponseMessage(item.text);\n\t\t\t\t}\n\t\t\t\tif(item.response_type == 'option'){\n\t\t\t\t\titem.options.forEach(function (i) { \n\t\t\t\t\t\tmessage = message + '<br/>' + i.value.input.text;\n\t\t\t\t\t\taddResponseMessage('Option:' + i.value.input.text);\n\t\t\t\t\t})\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t})\n\t\t\t//renderCustomComponent(message);\n        \n\t\t} catch (err) {\n\t\t\tconsole.log({ err });\n\t\t}\n\t};\n\tfetchMessageResponse();\n\t\n    // Now send the message throught the backend API\n  };\n\n    return (\n      <div className=\"App\">\n        <Widget\n          handleNewUserMessage={handleNewUserMessage}\n          \n          title=\"ThE NeW nOrMaL\"\n          subtitle=\"Book your COVID-19 test here!!\"\n        />\n      </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('chat_widget')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}